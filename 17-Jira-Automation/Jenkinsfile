// pipeline {
//   agent any

//   parameters {
//     choice( name: 'PROJECT',     choices: ['System Team - Platform Engineering (STPE)'],    description: 'Please enter the Project name')
//     choice( name: 'Issue Type',  choices: ['Story'],                                      description: 'Enter the Issue type')
//     string( name: 'Summary',     defaultValue: '',                                        description: 'Issue Summary')
//     choice( name: 'Assignee',    choices: ['Abhishek Alimchandani','Vandan Banda'],      description: 'Select the Assignee')
//     choice( name: 'Reporter',    choices: ['Tammy Reid'],                                  description: 'Select the Reporter')
//     choice( name: 'Epic Link',   choices: ['Jenkins Stabilization & Performance Enhancements'], description: 'Enter the Epic Link')
//     string( name: 'Description', defaultValue: '',                                        description: 'Enter the Story description')
//   }

//   environment {
//     JIRA_BASE_URL = 'https://abhishekalimchandani1624.atlassian.net'
//     JIRA_USER     = 'abhishekalimchandani1624@gmail.com'
//     // Store your API token as a Secret Text credential with ID 'jira-api-token-id'
//     JIRA_TOKEN    = credentials('jira-api-token-id')
//   }

//   stages {
//     stage('Create Jira Story') {
//       steps {
//         script {
//           // 1) cd into the folder containing both Jenkinsfile & helper
//           dir('17-Jira-Automation') {
//             // 2) load the helper; this gives you an object with createJiraStory()
//             def jira = load 'jiraUtil.groovy'

//             // 3) call the helper method on that object
//             def story = jira.createJiraStory(
//               env.JIRA_BASE_URL,
//               env.JIRA_USER,
//               env.JIRA_TOKEN,
//               params.PROJECT,
//               params['Issue Type'],
//               params.Summary,
//               params.Assignee,
//               params.Reporter,
//               params['Epic Link'],
//               params.Description
//             )

//             // 4) confirm in console
//             echo "‚úÖ Created JIRA Story ${story.key}"
//             echo "üîó URL: ${story.self}"
//           }
//         }
//       }
//     }
//   }
// }

pipeline {
  agent any

  parameters {
    // full display string, including parentheses
    choice( name: 'PROJECT',     choices: ['System Team - Platform Engineering (STPE)'],     description: 'Select the Project' )
    choice( name: 'Issue Type',  choices: ['Story'],                                      description: 'Enter the Issue type' )
    string( name: 'Summary',     defaultValue: '',                                         description: 'Issue Summary' )
    choice( name: 'Assignee',    choices: ['Abhishek Alimchandani','Vandan Banda'],       description: 'Select the Assignee' )
    choice( name: 'Reporter',    choices: ['Tammy Reid'],                                  description: 'Select the Reporter' )
    choice( name: 'Epic Link',   choices: ['Jenkins Stabilization & Performance Enhancements'], description: 'Enter the Epic Link key' )
    string( name: 'Description', defaultValue: '',                                         description: 'Enter the Story description' )
  }

  environment {
    JIRA_BASE_URL = 'https://abhishekalimchandani1624.atlassian.net'
    JIRA_USER     = 'abhishekalimchandani1624@gmail.com'
    JIRA_TOKEN    = credentials('jira-api-token-id')
  }

  stages {
    stage('Create Jira Story') {
      steps {
        script {
          // 1) Extract the project key from the full display string
          def rawProject = params.PROJECT
          def matcher    = (rawProject =~ /\(([^)]+)\)/)
          def projectKey = matcher ? matcher[0][1] : rawProject
          echo "Using project key: ${projectKey}"

          // 2) Build the JSON payload
          def payload = [
            fields: [
              project          : [ key: projectKey ],
              issuetype        : [ name: params['Issue Type'] ],
              summary          : params.Summary,
              description      : params.Description,
              assignee         : [ name: params.Assignee ],
              reporter         : [ name: params.Reporter ],
              customfield_10008: params['Epic Link']
            ]
          ]
          writeFile file: 'jira_payload.json', text: groovy.json.JsonOutput.toJson(payload)

          // 3) Send via curl, capturing body and HTTP code
          def response = sh(
            script: '''#!/bin/bash
RESPONSE=$(curl -s -w "\\n%{http_code}" \
  -H "Content-Type: application/json" \
  -u "$JIRA_USER:$JIRA_TOKEN" \
  -d @jira_payload.json \
  "$JIRA_BASE_URL/rest/api/2/issue")
echo "$RESPONSE"
''',
            returnStdout: true
          ).trim().readLines()

          // 4) Separate status from body
          def httpCode = response[-1]
          def body     = response.size()>1 ? response[0..-2].join('\n') : ''

          echo "HTTP Status: ${httpCode}"
          echo "Response Body:\n${body}"

          // 5) Handle response
          if (httpCode == '201') {
            def json = new groovy.json.JsonSlurper().parseText(body)
            echo "‚úÖ Created JIRA Story ${json.key}"
            echo "üîó ${json.self}"
          } else {
            error("‚ùå Failed to create JIRA Story (HTTP ${httpCode})")
          }
        }
      }
    }
  }
}
