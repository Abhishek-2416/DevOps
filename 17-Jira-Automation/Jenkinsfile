// jiraUtil.groovy
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

/**
 * Creates a JIRA issue (Story) with the given fields.
 *
 * @param baseUrl     JIRA root URL (e.g. https://your-domain.atlassian.net)
 * @param username    Atlassian account email
 * @param apiToken    Atlassian API token
 * @param projectKey  JIRA project key (e.g. "STPE")
 * @param issueType   Issue type name (e.g. "Story")
 * @param summary     Issue summary/title
 * @param assignee    Username to assign the issue to
 * @param reporter    Username reporting the issue
 * @param epicLink    Epic key (goes into customfield_10008)
 * @param description Issue description text
 * @return            Parsed JSON response (contains .key, .self, etc.)
 */
def createJiraStory(String baseUrl,
                    String username,
                    String apiToken,
                    String projectKey,
                    String issueType,
                    String summary,
                    String assignee,
                    String reporter,
                    String epicLink,
                    String description) {
    // 1) Open connection
    def endpoint   = "${baseUrl}/rest/api/2/issue"
    def connection = new URL(endpoint).openConnection()
    connection.requestMethod = 'POST'
    connection.doOutput      = true

    // 2) Set headers
    connection.setRequestProperty('Content-Type', 'application/json')
    def creds = "${username}:${apiToken}".bytes.encodeBase64().toString()
    connection.setRequestProperty('Authorization', "Basic ${creds}")

    // 3) Build fields map
    def fields = [
      project          : [ key: projectKey ],
      issuetype        : [ name: issueType ],
      summary          : summary,
      description      : description,
      assignee         : [ name: assignee ],
      reporter         : [ name: reporter ],
      customfield_10008: epicLink
    ]

    // 4) Serialize payload
    def payload  = [ fields: fields ]
    def jsonBody = new JsonBuilder(payload).toString()

    // 5) Send JSON
    connection.outputStream.withWriter('UTF-8') { it << jsonBody }

    // 6) Handle response
    def code = connection.responseCode
    if (code == 201) {
        def resp = new JsonSlurper().parseText(connection.inputStream.text)
        println "✅ Created ${resp.key}"
        return resp
    } else {
        def err = connection.errorStream?.text ?: 'No details'
        throw new RuntimeException("JIRA createStory failed (HTTP $code): $err")
    }
}

// Return this script’s binding so `load` can expose createJiraStory()
