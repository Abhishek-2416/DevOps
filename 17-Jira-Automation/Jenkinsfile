// pipeline {
//   agent any

//   parameters {
//     choice( name: 'PROJECT',     choices: ['System Team - Platform Engineering (STPE)'],    description: 'Please enter the Project name')
//     choice( name: 'Issue Type',  choices: ['Story'],                                      description: 'Enter the Issue type')
//     string( name: 'Summary',     defaultValue: '',                                        description: 'Issue Summary')
//     choice( name: 'Assignee',    choices: ['Abhishek Alimchandani','Vandan Banda'],      description: 'Select the Assignee')
//     choice( name: 'Reporter',    choices: ['Tammy Reid'],                                  description: 'Select the Reporter')
//     choice( name: 'Epic Link',   choices: ['Jenkins Stabilization & Performance Enhancements'], description: 'Enter the Epic Link')
//     string( name: 'Description', defaultValue: '',                                        description: 'Enter the Story description')
//   }

//   environment {
//     JIRA_BASE_URL = 'https://abhishekalimchandani1624.atlassian.net'
//     JIRA_USER     = 'abhishekalimchandani1624@gmail.com'
//     // Store your API token as a Secret Text credential with ID 'jira-api-token-id'
//     JIRA_TOKEN    = credentials('jira-api-token-id')
//   }

//   stages {
//     stage('Create Jira Story') {
//       steps {
//         script {
//           // 1) cd into the folder containing both Jenkinsfile & helper
//           dir('17-Jira-Automation') {
//             // 2) load the helper; this gives you an object with createJiraStory()
//             def jira = load 'jiraUtil.groovy'

//             // 3) call the helper method on that object
//             def story = jira.createJiraStory(
//               env.JIRA_BASE_URL,
//               env.JIRA_USER,
//               env.JIRA_TOKEN,
//               params.PROJECT,
//               params['Issue Type'],
//               params.Summary,
//               params.Assignee,
//               params.Reporter,
//               params['Epic Link'],
//               params.Description
//             )

//             // 4) confirm in console
//             echo "âœ… Created JIRA Story ${story.key}"
//             echo "ðŸ”— URL: ${story.self}"
//           }
//         }
//       }
//     }
//   }
// }

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

pipeline {
  agent any

  parameters {
    choice( name: 'PROJECT',     choices: ['System Team - Platform Engineering (STPE)'],    description: 'Select the Project (key in parentheses)' )
    choice( name: 'Issue Type',  choices: ['Story'],                                      description: 'Enter the Issue Type' )
    string( name: 'Summary',     defaultValue: '',                                         description: 'Issue Summary' )
    choice( name: 'Assignee',    choices: ['Abhishek Alimchandani','Vandan Banda'],       description: 'Select the Assignee' )
    choice( name: 'Reporter',    choices: ['Tammy Reid'],                                  description: 'Select the Reporter' )
    choice( name: 'Epic Link',   choices: ['Jenkins Stabilization & Performance Enhancements'], description: 'Enter the Epic Link Key' )
    string( name: 'Description', defaultValue: '',                                         description: 'Enter the Story Description' )
  }

  environment {
    JIRA_BASE_URL = 'https://abhishekalimchandani1624.atlassian.net'
    JIRA_USER     = 'abhishekalimchandani1624@gmail.com'
    // Your API token stored as a Secret Text credential with ID 'jira-api-token-id'
    JIRA_TOKEN    = credentials('jira-api-token-id')
  }

  stages {
    stage('Create Jira Story') {
      steps {
        script {
          // --- 1) Define helper (no checkStoryExist, no labels) ---
          

          def createStory = { projectKey, issueType, summary, description, assignee, reporter, epicLink ->
            def urlCreate   = "${env.JIRA_BASE_URL}/rest/api/2/issue"
            def payload     = [
              fields: [
                project          : [ key: projectKey ],
                issuetype        : [ name: issueType ],
                summary          : summary,
                description      : description,
                assignee         : [ name: assignee ],
                reporter         : [ name: reporter ],
                customfield_10008: epicLink
              ]
            ]
            def requestBody = JsonOutput.toJson(payload)

            // Build Basic Auth header from your env vars
            def authHeader = "Basic " + "${env.JIRA_USER}:${env.JIRA_TOKEN}"
                                .bytes.encodeBase64()
                                .toString()

            // fire the request
            def response = httpRequest(
              httpMode       : 'POST',
              url            : urlCreate,
              contentType    : 'APPLICATION_JSON',
              requestBody    : requestBody,
              customHeaders  : [[ name: 'Authorization', value: authHeader ]],
              validResponseCodes: '201'
            )

            // parse the 201 response
            def json      = new JsonSlurper().parseText(response.content)
            def storyKey  = json.key
            println "Jira Story Created: ${storyKey}"
            return "${env.JIRA_BASE_URL}/browse/${storyKey}"
          }

          // --- 2) Extract the real key from your full PROJECT parameter ---
          def rawProject = params.PROJECT
          def projectKey = rawProject.replaceAll(/^.*\((.*)\)$/, '$1')
          echo "Using project key: ${projectKey}"

          // --- 3) Call it with your parameters ---
          def storyUrl = createStory(
            projectKey,
            params['Issue Type'],
            params.Summary,
            params.Description,
            params.Assignee,
            params.Reporter,
            params['Epic Link']
          )

          // --- 4) Done ---
          echo "âœ… Story URL: ${storyUrl}"
        }
      }
    }
  }
}
